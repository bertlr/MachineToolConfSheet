/*
 * Copyright (C) 2016 by Herbert Roider <herbert@roider.at>
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.roiderh.machinetoolconfsheet;

import java.io.File;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.openide.util.NbPreferences;

final class WordProcessingProgramPanel extends javax.swing.JPanel {

    private final WordProcessingProgramOptionsPanelController controller;
    JFileChooser fc;

    WordProcessingProgramPanel(WordProcessingProgramOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
        fc = new JFileChooser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFilename = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(WordProcessingProgramPanel.class, "WordProcessingProgramPanel.jLabel1.text")); // NOI18N

        setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(WordProcessingProgramPanel.class, "WordProcessingProgramPanel.jLabel2.text")); // NOI18N
        add(jLabel2, new java.awt.GridBagConstraints());

        txtFilename.setColumns(50);
        txtFilename.setText(org.openide.util.NbBundle.getMessage(WordProcessingProgramPanel.class, "WordProcessingProgramPanel.txtFilename.text")); // NOI18N
        txtFilename.setMaximumSize(new java.awt.Dimension(300, 30));
        txtFilename.setMinimumSize(new java.awt.Dimension(150, 21));
        txtFilename.setName("txtFilename"); // NOI18N
        add(txtFilename, new java.awt.GridBagConstraints());

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(WordProcessingProgramPanel.class, "WordProcessingProgramPanel.cmdBrowse.text")); // NOI18N
        jButton1.setName("cmdBrowse"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new java.awt.GridBagConstraints());
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int returnVal = fc.showOpenDialog(WordProcessingProgramPanel.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            if (file.canExecute()) {
                this.txtFilename.setText(file.getAbsolutePath());
            } else {
                JOptionPane.showMessageDialog(null, "Error: File is not executeable"); //NOI18N
            }
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    void load() {
        // TODO read settings and initialize GUI
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(WordProcessingProgramPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(WordProcessingProgramPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
        Preferences prefs = NbPreferences.forModule(WordProcessingProgramPanel.class);
        txtFilename.setText(prefs.get("executeable", ""));
    }

    void store() {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(WordProcessingProgramPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(WordProcessingProgramPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
        NbPreferences.forModule(WordProcessingProgramPanel.class).put("executeable", txtFilename.getText().trim());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txtFilename;
    // End of variables declaration//GEN-END:variables
}
